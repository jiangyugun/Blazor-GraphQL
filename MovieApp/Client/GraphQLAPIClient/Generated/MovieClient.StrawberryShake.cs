// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public static partial class MovieClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::MovieApp.Client.GraphQLAPIClient.State.MovieClientStoreAccessor> AddMovieClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::MovieApp.Client.GraphQLAPIClient.State.MovieClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.AddMovieDataMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.FetchGenreListQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.MovieClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.IMovieClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::MovieApp.Client.GraphQLAPIClient.State.MovieClientStoreAccessor>("MovieClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("MovieClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::MovieApp.Client.GraphQLAPIClient.MovieInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>, global::MovieApp.Client.GraphQLAPIClient.State.AddMovieDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>, global::MovieApp.Client.GraphQLAPIClient.State.AddMovieDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.AddMovieDataMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.AddMovieDataMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>, global::MovieApp.Client.GraphQLAPIClient.State.FetchGenreListResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>, global::MovieApp.Client.GraphQLAPIClient.State.FetchGenreListBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.FetchGenreListQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.FetchGenreListQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::MovieApp.Client.GraphQLAPIClient.State.MovieClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.MovieClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::MovieApp.Client.GraphQLAPIClient.IMovieClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::MovieApp.Client.GraphQLAPIClient.MovieClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace MovieApp.Client.GraphQLAPIClient
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataResult : global::System.IEquatable<AddMovieDataResult>, IAddMovieDataResult
    {
        public AddMovieDataResult(global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie addMovie)
        {
            AddMovie = addMovie;
        }

        public global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie AddMovie { get; }

        public virtual global::System.Boolean Equals(AddMovieDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AddMovie.Equals(other.AddMovie));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddMovieDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AddMovie.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieData_AddMovie_AddMoviePayload : global::System.IEquatable<AddMovieData_AddMovie_AddMoviePayload>, IAddMovieData_AddMovie_AddMoviePayload
    {
        public AddMovieData_AddMovie_AddMoviePayload(global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie_Movie movie)
        {
            Movie = movie;
        }

        public global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie_Movie Movie { get; }

        public virtual global::System.Boolean Equals(AddMovieData_AddMovie_AddMoviePayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Movie.Equals(other.Movie));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddMovieData_AddMovie_AddMoviePayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Movie.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieData_AddMovie_Movie_Movie : global::System.IEquatable<AddMovieData_AddMovie_Movie_Movie>, IAddMovieData_AddMovie_Movie_Movie
    {
        public AddMovieData_AddMovie_Movie_Movie(global::System.String title)
        {
            Title = title;
        }

        public global::System.String Title { get; }

        public virtual global::System.Boolean Equals(AddMovieData_AddMovie_Movie_Movie? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Title.Equals(other.Title));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((AddMovieData_AddMovie_Movie_Movie)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Title.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieDataResult
    {
        public global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie AddMovie { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieData_AddMovie
    {
        public global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie_Movie Movie { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieData_AddMovie_AddMoviePayload : IAddMovieData_AddMovie
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieData_AddMovie_Movie
    {
        public global::System.String Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieData_AddMovie_Movie_Movie : IAddMovieData_AddMovie_Movie
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListResult : global::System.IEquatable<FetchGenreListResult>, IFetchGenreListResult
    {
        public FetchGenreListResult(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList> genreList)
        {
            GenreList = genreList;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList> GenreList { get; }

        public virtual global::System.Boolean Equals(FetchGenreListResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(GenreList, other.GenreList));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchGenreListResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var GenreList_elm in GenreList)
                {
                    hash ^= 397 * GenreList_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreList_GenreList_Genre : global::System.IEquatable<FetchGenreList_GenreList_Genre>, IFetchGenreList_GenreList_Genre
    {
        public FetchGenreList_GenreList_Genre(global::System.Int32 genreId, global::System.String genreName)
        {
            GenreId = genreId;
            GenreName = genreName;
        }

        public global::System.Int32 GenreId { get; }

        public global::System.String GenreName { get; }

        public virtual global::System.Boolean Equals(FetchGenreList_GenreList_Genre? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GenreId == other.GenreId) && GenreName.Equals(other.GenreName);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FetchGenreList_GenreList_Genre)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GenreId.GetHashCode();
                hash ^= 397 * GenreName.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchGenreListResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList> GenreList { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchGenreList_GenreList
    {
        public global::System.Int32 GenreId { get; }

        public global::System.String GenreName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchGenreList_GenreList_Genre : IFetchGenreList_GenreList
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _decimalFormatter = default !;
        public global::System.String TypeName => "MovieInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _decimalFormatter = serializerResolver.GetInputValueFormatter("Decimal");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.MovieInput;
            var inputInfo = runtimeValue as global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsMovieIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("movieId", FormatMovieId(input.MovieId)));
            }

            if (inputInfo.IsTitleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("title", FormatTitle(input.Title)));
            }

            if (inputInfo.IsOverviewSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("overview", FormatOverview(input.Overview)));
            }

            if (inputInfo.IsGenreSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("genre", FormatGenre(input.Genre)));
            }

            if (inputInfo.IsLanguageSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("language", FormatLanguage(input.Language)));
            }

            if (inputInfo.IsDurationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("duration", FormatDuration(input.Duration)));
            }

            if (inputInfo.IsRatingSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("rating", FormatRating(input.Rating)));
            }

            if (inputInfo.IsPosterPathSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("posterPath", FormatPosterPath(input.PosterPath)));
            }

            return fields;
        }

        private global::System.Object? FormatMovieId(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatTitle(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatOverview(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatGenre(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatLanguage(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatDuration(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatRating(global::System.Decimal input)
        {
            return _decimalFormatter.Format(input);
        }

        private global::System.Object? FormatPosterPath(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieInput : global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo, global::System.IEquatable<MovieInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((MovieInput)obj);
        }

        public virtual global::System.Boolean Equals(MovieInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (MovieId == other.MovieId) && Title.Equals(other.Title) && Overview.Equals(other.Overview) && Genre.Equals(other.Genre) && Language.Equals(other.Language) && Duration == other.Duration && Rating == other.Rating && ((PosterPath is null && other.PosterPath is null) || PosterPath != null && PosterPath.Equals(other.PosterPath));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * MovieId.GetHashCode();
                hash ^= 397 * Title.GetHashCode();
                hash ^= 397 * Overview.GetHashCode();
                hash ^= 397 * Genre.GetHashCode();
                hash ^= 397 * Language.GetHashCode();
                hash ^= 397 * Duration.GetHashCode();
                hash ^= 397 * Rating.GetHashCode();
                if (PosterPath != null)
                {
                    hash ^= 397 * PosterPath.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Int32 _value_movieId;
        private global::System.Boolean _set_movieId;
        private global::System.String _value_title = default !;
        private global::System.Boolean _set_title;
        private global::System.String _value_overview = default !;
        private global::System.Boolean _set_overview;
        private global::System.String _value_genre = default !;
        private global::System.Boolean _set_genre;
        private global::System.String _value_language = default !;
        private global::System.Boolean _set_language;
        private global::System.Int32 _value_duration;
        private global::System.Boolean _set_duration;
        private global::System.Decimal _value_rating;
        private global::System.Boolean _set_rating;
        private global::System.String? _value_posterPath;
        private global::System.Boolean _set_posterPath;
        public global::System.Int32 MovieId
        {
            get => _value_movieId;
            set
            {
                _set_movieId = true;
                _value_movieId = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsMovieIdSet => _set_movieId;
        public global::System.String Title
        {
            get => _value_title;
            set
            {
                _set_title = true;
                _value_title = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsTitleSet => _set_title;
        public global::System.String Overview
        {
            get => _value_overview;
            set
            {
                _set_overview = true;
                _value_overview = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsOverviewSet => _set_overview;
        public global::System.String Genre
        {
            get => _value_genre;
            set
            {
                _set_genre = true;
                _value_genre = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsGenreSet => _set_genre;
        public global::System.String Language
        {
            get => _value_language;
            set
            {
                _set_language = true;
                _value_language = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsLanguageSet => _set_language;
        public global::System.Int32 Duration
        {
            get => _value_duration;
            set
            {
                _set_duration = true;
                _value_duration = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsDurationSet => _set_duration;
        public global::System.Decimal Rating
        {
            get => _value_rating;
            set
            {
                _set_rating = true;
                _value_rating = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsRatingSet => _set_rating;
        public global::System.String? PosterPath
        {
            get => _value_posterPath;
            set
            {
                _set_posterPath = true;
                _value_posterPath = value;
            }
        }

        global::System.Boolean global::MovieApp.Client.GraphQLAPIClient.State.IMovieInputInfo.IsPosterPathSet => _set_posterPath;
    }

    /// <summary>
    /// Represents the operation service of the AddMovieData GraphQL operation
    /// <code>
    /// mutation AddMovieData($movieData: MovieInput!) {
    ///   addMovie(movie: $movieData) {
    ///     __typename
    ///     movie {
    ///       __typename
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataMutationDocument : global::StrawberryShake.IDocument
    {
        private AddMovieDataMutationDocument()
        {
        }

        public static AddMovieDataMutationDocument Instance { get; } = new AddMovieDataMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x28, 0x24, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x28, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "37e6da10a6006283a8fbd65a05bfefd3");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the AddMovieData GraphQL operation
    /// <code>
    /// mutation AddMovieData($movieData: MovieInput!) {
    ///   addMovie(movie: $movieData) {
    ///     __typename
    ///     movie {
    ///       __typename
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataMutation : global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IAddMovieDataResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _movieInputFormatter;
        public AddMovieDataMutation(global::StrawberryShake.IOperationExecutor<IAddMovieDataResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _movieInputFormatter = serializerResolver.GetInputValueFormatter("MovieInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IAddMovieDataResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddMovieDataResult>> ExecuteAsync(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(movieData);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IAddMovieDataResult>> Watch(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(movieData);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("movieData", FormatMovieData(movieData));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: AddMovieDataMutationDocument.Instance.Hash.Value, name: "AddMovieData", document: AddMovieDataMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatMovieData(global::MovieApp.Client.GraphQLAPIClient.MovieInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _movieInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the AddMovieData GraphQL operation
    /// <code>
    /// mutation AddMovieData($movieData: MovieInput!) {
    ///   addMovie(movie: $movieData) {
    ///     __typename
    ///     movie {
    ///       __typename
    ///       title
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IAddMovieDataMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IAddMovieDataResult>> ExecuteAsync(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IAddMovieDataResult>> Watch(global::MovieApp.Client.GraphQLAPIClient.MovieInput movieData, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FetchGenreList GraphQL operation
    /// <code>
    /// query FetchGenreList {
    ///   genreList {
    ///     __typename
    ///     genreId
    ///     genreName
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListQueryDocument : global::StrawberryShake.IDocument
    {
        private FetchGenreListQueryDocument()
        {
        }

        public static FetchGenreListQueryDocument Instance { get; } = new FetchGenreListQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x46, 0x65, 0x74, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x49, 0x64, 0x20, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "6134424336e69ede86c543200c9fe400");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchGenreList GraphQL operation
    /// <code>
    /// query FetchGenreList {
    ///   genreList {
    ///     __typename
    ///     genreId
    ///     genreName
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListQuery : global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFetchGenreListResult> _operationExecutor;
        public FetchGenreListQuery(global::StrawberryShake.IOperationExecutor<IFetchGenreListResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFetchGenreListResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchGenreListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchGenreListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FetchGenreListQueryDocument.Instance.Hash.Value, name: "FetchGenreList", document: FetchGenreListQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the FetchGenreList GraphQL operation
    /// <code>
    /// query FetchGenreList {
    ///   genreList {
    ///     __typename
    ///     genreId
    ///     genreName
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IFetchGenreListQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFetchGenreListResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFetchGenreListResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the MovieClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieClient : global::MovieApp.Client.GraphQLAPIClient.IMovieClient
    {
        private readonly global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation _addMovieData;
        private readonly global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery _fetchGenreList;
        public MovieClient(global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation addMovieData, global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery fetchGenreList)
        {
            _addMovieData = addMovieData ?? throw new global::System.ArgumentNullException(nameof(addMovieData));
            _fetchGenreList = fetchGenreList ?? throw new global::System.ArgumentNullException(nameof(fetchGenreList));
        }

        public static global::System.String ClientName => "MovieClient";
        public global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation AddMovieData => _addMovieData;
        public global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery FetchGenreList => _fetchGenreList;
    }

    /// <summary>
    /// Represents the MovieClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial interface IMovieClient
    {
        global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataMutation AddMovieData { get; }

        global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListQuery FetchGenreList { get; }
    }
}

namespace MovieApp.Client.GraphQLAPIClient.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.AddMovieDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public AddMovieDataResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult);
        public AddMovieDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is AddMovieDataResultInfo info)
            {
                return new AddMovieDataResult(MapNonNullableIAddMovieData_AddMovie(info.AddMovie, snapshot));
            }

            throw new global::System.ArgumentException("AddMovieDataResultInfo expected.");
        }

        private global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie MapNonNullableIAddMovieData_AddMovie(global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddMovieData_AddMovie returnValue = default !;
            if (data.__typename.Equals("AddMoviePayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddMovieData_AddMovie_AddMoviePayload(MapNonNullableIAddMovieData_AddMovie_Movie(data.Movie ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::MovieApp.Client.GraphQLAPIClient.IAddMovieData_AddMovie_Movie MapNonNullableIAddMovieData_AddMovie_Movie(global::MovieApp.Client.GraphQLAPIClient.State.MovieData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IAddMovieData_AddMovie_Movie returnValue = default !;
            if (data.__typename.Equals("Movie", global::System.StringComparison.Ordinal))
            {
                returnValue = new AddMovieData_AddMovie_Movie_Movie(data.Title ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public AddMovieDataResultInfo(global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData addMovie, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            AddMovie = addMovie;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData AddMovie { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new AddMovieDataResultInfo(AddMovie, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.FetchGenreListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FetchGenreListResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult);
        public FetchGenreListResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FetchGenreListResultInfo info)
            {
                return new FetchGenreListResult(MapNonNullableIFetchGenreList_GenreListNonNullableArray(info.GenreList, snapshot));
            }

            throw new global::System.ArgumentException("FetchGenreListResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList> MapNonNullableIFetchGenreList_GenreListNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.GenreData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var genres = new global::System.Collections.Generic.List<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList>();
            foreach (global::MovieApp.Client.GraphQLAPIClient.State.GenreData child in list)
            {
                genres.Add(MapNonNullableIFetchGenreList_GenreList(child, snapshot));
            }

            return genres;
        }

        private global::MovieApp.Client.GraphQLAPIClient.IFetchGenreList_GenreList MapNonNullableIFetchGenreList_GenreList(global::MovieApp.Client.GraphQLAPIClient.State.GenreData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IFetchGenreList_GenreList returnValue = default !;
            if (data.__typename.Equals("Genre", global::System.StringComparison.Ordinal))
            {
                returnValue = new FetchGenreList_GenreList_Genre(data.GenreId ?? throw new global::System.ArgumentNullException(), data.GenreName ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FetchGenreListResultInfo(global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.GenreData> genreList, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GenreList = genreList;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.GenreData> GenreList { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FetchGenreListResultInfo(GenreList, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    internal interface IMovieInputInfo
    {
        global::System.Boolean IsMovieIdSet { get; }

        global::System.Boolean IsTitleSet { get; }

        global::System.Boolean IsOverviewSet { get; }

        global::System.Boolean IsGenreSet { get; }

        global::System.Boolean IsLanguageSet { get; }

        global::System.Boolean IsDurationSet { get; }

        global::System.Boolean IsRatingSet { get; }

        global::System.Boolean IsPosterPathSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMovieDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public AddMovieDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IAddMovieDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IAddMovieDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IAddMovieDataResult Result, AddMovieDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IAddMovieDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IAddMovieDataResult, AddMovieDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new AddMovieDataResultInfo(DeserializeNonNullableIAddMovieData_AddMovie(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addMovie")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData DeserializeNonNullableIAddMovieData_AddMovie(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AddMoviePayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MovieApp.Client.GraphQLAPIClient.State.AddMoviePayloadData(typename, movie: DeserializeNonNullableIAddMovieData_AddMovie_Movie(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "movie")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::MovieApp.Client.GraphQLAPIClient.State.MovieData DeserializeNonNullableIAddMovieData_AddMovie_Movie(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Movie", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MovieApp.Client.GraphQLAPIClient.State.MovieData(typename, title: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "title")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class FetchGenreListBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public FetchGenreListBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::MovieApp.Client.GraphQLAPIClient.IFetchGenreListResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IFetchGenreListResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFetchGenreListResult Result, FetchGenreListResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IFetchGenreListResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFetchGenreListResult, FetchGenreListResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FetchGenreListResultInfo(DeserializeNonNullableIFetchGenreList_GenreListNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreList")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::MovieApp.Client.GraphQLAPIClient.State.GenreData> DeserializeNonNullableIFetchGenreList_GenreListNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var genres = new global::System.Collections.Generic.List<global::MovieApp.Client.GraphQLAPIClient.State.GenreData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                genres.Add(DeserializeNonNullableIFetchGenreList_GenreList(child));
            }

            return genres;
        }

        private global::MovieApp.Client.GraphQLAPIClient.State.GenreData DeserializeNonNullableIFetchGenreList_GenreList(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Genre", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::MovieApp.Client.GraphQLAPIClient.State.GenreData(typename, genreId: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreId")), genreName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "genreName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class AddMoviePayloadData
    {
        public AddMoviePayloadData(global::System.String __typename, global::MovieApp.Client.GraphQLAPIClient.State.MovieData? movie = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Movie = movie;
        }

        public global::System.String __typename { get; }

        public global::MovieApp.Client.GraphQLAPIClient.State.MovieData? Movie { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieData
    {
        public MovieData(global::System.String __typename, global::System.String? title = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Title = title;
        }

        public global::System.String __typename { get; }

        public global::System.String? Title { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class GenreData
    {
        public GenreData(global::System.String __typename, global::System.Int32? genreId = default !, global::System.String? genreName = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            GenreId = genreId;
            GenreName = genreName;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? GenreId { get; }

        public global::System.String? GenreName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.5.0.0")]
    public partial class MovieClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public MovieClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
